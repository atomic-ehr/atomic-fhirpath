/**
 * FHIRPath Visitor Interface
 * This interface defines the visitor pattern for traversing FHIRPath AST nodes
 */

export interface FhirpathVisitor<T> {
    // Top-level expressions
    visitEntireExpression(ctx: EntireExpressionContext): T;
    
    // Expression types
    visitTermExpression(ctx: TermExpressionContext): T;
    visitInvocationExpression(ctx: InvocationExpressionContext): T;
    visitIndexerExpression(ctx: IndexerExpressionContext): T;
    visitPolarityExpression(ctx: PolarityExpressionContext): T;
    visitMultiplicativeExpression(ctx: MultiplicativeExpressionContext): T;
    visitAdditiveExpression(ctx: AdditiveExpressionContext): T;
    visitTypeExpression(ctx: TypeExpressionContext): T;
    visitUnionExpression(ctx: UnionExpressionContext): T;
    visitInequalityExpression(ctx: InequalityExpressionContext): T;
    visitEqualityExpression(ctx: EqualityExpressionContext): T;
    visitMembershipExpression(ctx: MembershipExpressionContext): T;
    visitAndExpression(ctx: AndExpressionContext): T;
    visitOrExpression(ctx: OrExpressionContext): T;
    visitImpliesExpression(ctx: ImpliesExpressionContext): T;
    
    // Term types
    visitInvocationTerm(ctx: InvocationTermContext): T;
    visitLiteralTerm(ctx: LiteralTermContext): T;
    visitExternalConstantTerm(ctx: ExternalConstantTermContext): T;
    visitParenthesizedTerm(ctx: ParenthesizedTermContext): T;
    
    // Literal types
    visitNullLiteral(ctx: NullLiteralContext): T;
    visitBooleanLiteral(ctx: BooleanLiteralContext): T;
    visitStringLiteral(ctx: StringLiteralContext): T;
    visitNumberLiteral(ctx: NumberLiteralContext): T;
    visitLongNumberLiteral(ctx: LongNumberLiteralContext): T;
    visitDateLiteral(ctx: DateLiteralContext): T;
    visitDateTimeLiteral(ctx: DateTimeLiteralContext): T;
    visitTimeLiteral(ctx: TimeLiteralContext): T;
    visitQuantityLiteral(ctx: QuantityLiteralContext): T;
    
    // Invocation types
    visitMemberInvocation(ctx: MemberInvocationContext): T;
    visitFunctionInvocation(ctx: FunctionInvocationContext): T;
    visitThisInvocation(ctx: ThisInvocationContext): T;
    visitIndexInvocation(ctx: IndexInvocationContext): T;
    visitTotalInvocation(ctx: TotalInvocationContext): T;
    
    // Other constructs
    visitExternalConstant(ctx: ExternalConstantContext): T;
    visitFunction(ctx: FunctionContext): T;
    visitParamList(ctx: ParamListContext): T;
    visitQuantity(ctx: QuantityContext): T;
    visitUnit(ctx: UnitContext): T;
    visitDateTimePrecision(ctx: DateTimePrecisionContext): T;
    visitPluralDateTimePrecision(ctx: PluralDateTimePrecisionContext): T;
    visitTypeSpecifier(ctx: TypeSpecifierContext): T;
    visitQualifiedIdentifier(ctx: QualifiedIdentifierContext): T;
    visitIdentifier(ctx: IdentifierContext): T;
}

// Context types (these would typically be generated by ANTLR)
export interface ParseRuleContext {
    getText(): string;
    getChildCount(): number;
    getChild(index: number): ParseRuleContext | null;
    getParent(): ParseRuleContext | null;
    getSourceInterval(): any;
    accept<T>(visitor: FhirpathVisitor<T>): T;
}

export interface EntireExpressionContext extends ParseRuleContext {
    expression(): ExpressionContext;
}

export interface ExpressionContext extends ParseRuleContext {}

export interface TermExpressionContext extends ExpressionContext {
    term(): TermContext;
}

export interface InvocationExpressionContext extends ExpressionContext {
    expression(): ExpressionContext;
    invocation(): InvocationContext;
}

export interface IndexerExpressionContext extends ExpressionContext {
    expression(): ExpressionContext[];
}

export interface PolarityExpressionContext extends ExpressionContext {
    expression(): ExpressionContext;
}

export interface MultiplicativeExpressionContext extends ExpressionContext {
    expression(): ExpressionContext[];
}

export interface AdditiveExpressionContext extends ExpressionContext {
    expression(): ExpressionContext[];
}

export interface TypeExpressionContext extends ExpressionContext {
    expression(): ExpressionContext;
    typeSpecifier(): TypeSpecifierContext;
}

export interface UnionExpressionContext extends ExpressionContext {
    expression(): ExpressionContext[];
}

export interface InequalityExpressionContext extends ExpressionContext {
    expression(): ExpressionContext[];
}

export interface EqualityExpressionContext extends ExpressionContext {
    expression(): ExpressionContext[];
}

export interface MembershipExpressionContext extends ExpressionContext {
    expression(): ExpressionContext[];
}

export interface AndExpressionContext extends ExpressionContext {
    expression(): ExpressionContext[];
}

export interface OrExpressionContext extends ExpressionContext {
    expression(): ExpressionContext[];
}

export interface ImpliesExpressionContext extends ExpressionContext {
    expression(): ExpressionContext[];
}

export interface TermContext extends ParseRuleContext {}

export interface InvocationTermContext extends TermContext {
    invocation(): InvocationContext;
}

export interface LiteralTermContext extends TermContext {
    literal(): LiteralContext;
}

export interface ExternalConstantTermContext extends TermContext {
    externalConstant(): ExternalConstantContext;
}

export interface ParenthesizedTermContext extends TermContext {
    expression(): ExpressionContext;
}

export interface LiteralContext extends ParseRuleContext {}

export interface NullLiteralContext extends LiteralContext {}

export interface BooleanLiteralContext extends LiteralContext {}

export interface StringLiteralContext extends LiteralContext {}

export interface NumberLiteralContext extends LiteralContext {}

export interface LongNumberLiteralContext extends LiteralContext {}

export interface DateLiteralContext extends LiteralContext {}

export interface DateTimeLiteralContext extends LiteralContext {}

export interface TimeLiteralContext extends LiteralContext {}

export interface QuantityLiteralContext extends LiteralContext {
    quantity(): QuantityContext;
}

export interface InvocationContext extends ParseRuleContext {}

export interface MemberInvocationContext extends InvocationContext {
    identifier(): IdentifierContext;
}

export interface FunctionInvocationContext extends InvocationContext {
    function(): FunctionContext;
}

export interface ThisInvocationContext extends InvocationContext {}

export interface IndexInvocationContext extends InvocationContext {}

export interface TotalInvocationContext extends InvocationContext {}

export interface ExternalConstantContext extends ParseRuleContext {
    identifier(): IdentifierContext;
}

export interface FunctionContext extends ParseRuleContext {
    identifier(): IdentifierContext;
    paramList(): ParamListContext | null;
}

export interface ParamListContext extends ParseRuleContext {
    expression(): ExpressionContext[];
}

export interface QuantityContext extends ParseRuleContext {
    unit(): UnitContext | null;
}

export interface UnitContext extends ParseRuleContext {}

export interface DateTimePrecisionContext extends UnitContext {}

export interface PluralDateTimePrecisionContext extends UnitContext {}

export interface TypeSpecifierContext extends ParseRuleContext {
    qualifiedIdentifier(): QualifiedIdentifierContext;
}

export interface QualifiedIdentifierContext extends ParseRuleContext {
    identifier(): IdentifierContext[];
}

export interface IdentifierContext extends ParseRuleContext {} 